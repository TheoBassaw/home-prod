---
- name: Talos Configuration | Make sure directories exist
  delegate_to: localhost
  run_once: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "~/.talos/{{ cluster_name }}"
    - "~/.kube"

- name: Talos Configuration | Upload schematic to image factory
  delegate_to: localhost
  run_once: true
  ansible.builtin.uri:
    url: https://factory.talos.dev/schematics
    method: POST
    body: "{{ schematic | to_yaml }}"
    body_format: raw
    status_code: 201
  register: schematic

- name: Talos Configuration | Generate secret bundle
  delegate_to: localhost
  run_once: true
  ansible.builtin.command: "talosctl gen secrets --output-file ~/.talos/{{ cluster_name }}/secrets.yaml"
  args:
    creates: "~/.talos/{{ cluster_name }}/secrets.yaml"

- name: Talos Configuration | Generate machine configs
  delegate_to: localhost
  ansible.builtin.command: |
    talosctl gen config "{{ cluster_name }}" "{{ endpoint }}" \
    --with-secrets "~/.talos/{{ cluster_name }}/secrets.yaml" \
    --output-types "{% if item.machine_config.machine.type == 'controlplane' %}controlplane{% else %}worker{% endif %}" \
    --output "~/.talos/{{ cluster_name }}/{{ item.machine_config.machine.network.hostname }}.yaml" \
    --config-patch "{{ all_config_patch }}"
    --config-patch "{{ item.machine_config }}"
  args:
    creates: "~/.talos/{{ cluster_name }}/{{ item.machine_config.machine.network.hostname }}.yaml"
  loop: "{{ nodes }}"


- name: Talos Configuration | Generate talconfig
  delegate_to: localhost
  run_once: true
  ansible.builtin.command: |
    talosctl gen config "{{ cluster_name }}" "{{ endpoint }}" \
    --with-secrets "~/.talos/{{ cluster_name }}/secrets.yaml" \
    --output-types talosconfig --output "~/.talos/{{ cluster_name }}/{{ cluster_name }}"
  args:
    creates: "~/.talos/{{ cluster_name }}/{{ cluster_name }}"

- name: PXE | Make sure directories exist
  run_once: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "~/matchbox/assets"
    - "~/matchbox/groups"
    - "~/matchbox/profiles"

- name: PXE | Generate matchbox profiles
  run_once: true
  ansible.builtin.template:
    src: matchbox-profiles.json.j2
    dest: "~/matchbox/profiles/{{ item.machine_config.machine.network.hostname }}.json"
    mode: "0644"
  loop: "{{ nodes }}"

- name: PXE | Generate matchbox groups
  run_once: true
  ansible.builtin.template:
    src: matchbox-groups.json.j2
    dest: "~/matchbox/groups/{{ item.machine_config.machine.network.hostname }}.json"
    mode: "0644"
  loop: "{{ nodes }}"

- name: PXE | Download image factory assets
  run_once: true
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    mode: '0644'
  loop:
    - url: "https://factory.talos.dev/image/{{ schematic.json.id }}/v{{ talos_version }}/kernel-amd64"
      dest: "~/matchbox/assets/vmlinuz"
    - url: "https://factory.talos.dev/image/{{ schematic.json.id }}/v{{ talos_version }}/initramfs-amd64.xz"
      dest: "~/matchbox/assets/initramfs.xz"

- name: PXE | Start services
  run_once: true
  notify: PXE | Stop services
  community.docker.docker_compose_v2:
    project_name: pxe
    wait: true
    definition:
      services:
        matchbox:
          image: quay.io/poseidon/matchbox:v{{ matchbox_image_version }}
          environment:
            - TZ=America/New_York
            - MATCHBOX_ADDRESS=0.0.0.0:8080
            - MATCHBOX_LOG_LEVEL=debug
          ports:
            - 8080:8080
          privileged: true
          volumes:
            - "{{ playbook_dir }}/files/{{ cluster_name }}/matchbox:/var/lib/matchbox"
          restart: always

        dnsmasq:
          image: quay.io/poseidon/dnsmasq:v{{ poseidon_dnsmasq_image_version }}
          network_mode: host
          privileged: true
          cap_add:
            - NET_ADMIN
          restart: always
          command: '-d -q
            --dhcp-range={{ ansible_controller_network }},proxy,{{ ansible_controller_netmask }}
            --enable-tftp
            --tftp-root=/var/lib/tftpboot
            --dhcp-userclass=set:ipxe,iPXE
            --pxe-service=tag:#ipxe,x86PC,"PXE chainload to iPXE",undionly.kpxe
            --pxe-service=tag:ipxe,x86PC,"iPXE",http://{{ ansible_controller_ip }}:8080/boot.ipxe
            --pxe-service=tag:#ipxe,X86-64_EFI,"PXE chainload to iPXE UEFI",ipxe.efi
            --pxe-service=tag:ipxe,X86-64_EFI,"iPXE UEFI",http://{{ ansible_controller_ip }}:8080/boot.ipxe
            --log-queries
            --log-dhcp'

- name: PXE | Wake up nodes
  delegate_to: localhost
  community.general.wakeonlan:
    mac: "{{ mac_address }}"

- name: Talos Bootstrap | Bootstrap controlplane
  delegate_to: localhost
  run_once: true
  ansible.builtin.command: |
    talosctl bootstrap --nodes "{{ ansible_host }}" \
    --endpoints "{{ ansible_host }}" \
    --talosconfig "~/.talos/{{ cluster_name }}"
  register: result
  changed_when: false
  failed_when: "'error executing bootstrap: rpc error: code = Unavailable desc = connection error' in result.stderr"
  retries: 30
  delay: 10

- name: Talos Bootstrap | Generate kubeconfig
  delegate_to: localhost
  run_once: true
  ansible.builtin.command: |
    talosctl kubeconfig --nodes "{{ ansible_host }}" \
    --endpoints "{{ ansible_host }}" \
    --talosconfig "~/.talos/{{ cluster_name }}"
  changed_when: false

- name: Talos Bootstrap | Add cilium helm repo
  delegate_to: localhost
  run_once: true
  kubernetes.core.helm_repository:
    name: cilium
    repo_url: https://helm.cilium.io/

- name: Talos Bootstrap | Apply cilium helm chart
  delegate_to: localhost
  run_once: true
  kubernetes.core.helm:
    name: cilium
    chart_ref: cilium/cilium
    chart_version: "1.17.4"
    release_namespace: kube-system
    update_repo_cache: true
    context: "admin@{{ cluster_name }}"
    kubeconfig: "~/.kube/config"
    wait: true
    values_files:
      - "{{ playbook_dir }}/../kubernetes/clusters/{{ cluster_name }}/kube-system/cilium/helm-values.yaml"
  retries: 30
  delay: 10

- name: Talos Bootstrap | Apply flux-operator helm chart
  delegate_to: localhost
  run_once: true
  kubernetes.core.helm:
    name: flux-operator
    chart_ref: oci://ghcr.io/controlplaneio-fluxcd/charts/flux-operator
    chart_version: "0.22.0"
    release_namespace: flux-system
    create_namespace: true
    update_repo_cache: true
    context: "admin@{{ cluster_name }}"
    kubeconfig: "~/.kube/config"
    wait: true

- name: Talos Bootstrap | Start flux cluster sync
  delegate_to: localhost
  run_once: true
  kubernetes.core.k8s:
    src: "{{ playbook_dir }}/../kubernetes/clusters/{{ cluster_name }}/flux-system/flux-instance.yaml"
    wait: true
